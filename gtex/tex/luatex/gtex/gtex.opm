\_codedecl \guix {An interface to include results of Guix evaluations <0.3>}

\_namespace{gtex}

\_def\.GTeX{\lower.5ex\hbox{G}\kern-.18em\TeX}

\_nspublic \GTeX ;

\_def\.gscriptpath{\_jobname.scm}
\_def\.grespath{\_jobname.inp}
\_isfile\.gscriptpath\_iffalse\_opwarning{
The auxiliary file `\.gscriptpath` will be created,
you can use `gtex \.gscriptpath` to create the file
`\.grespath` that will contain this document's dependencies.
}\_fi

\_directlua{require('gtex.lua')}

\_def\.rawincludett#1{\_directlua{includett([[#1]], true)}}

\_def\.includett{\_scantoeol\.rawincludett}

\_nspublic \includett \rawincludett ;

\_doc
The first \GTeX primitive \~`\guix`,
it takes an arbitrary identifier
(only limitation is it musn't contain a `:`),
and a Guix expression.
It writes these to an auxiliary file, so that the results
of said expression can later be retreived given the chosen identifier.
\_cod

\_def\.guix#1#2{\_directlua{guix([[#1]], [[#2]])}}
\_def\.guixref#1{\_directlua{guixref([[#1]])}}

\_nspublic \guix \guixref ;

\_doc
\GTeX opens a file called \~`\jobname`.inp` if it exists.
This file is generated by the `gtex` script and
contains pairs of identifiers with the resulting built paths,
which Guix produced.
These are defined as `\csname guix:identifier\endcsname`,
when you load-in \GTeX.
\_cod

\_directlua{load_guixrefs([[\.grespath]])}

\_doc
\~`\remotefile` takes an identifier, uri and a hash,
and causes Guix to download the file as the result.
\~`\rawremotefile` doesn't take an identifier and only
creates the guix expression without registering it with G\TeX.
\_cod

\_def\.rawremotefile#1#2{
(let ((h ((@ (guix base64) base64-decode) "#2")))
  ((@ (guix download) origin)
    (uri "#1")
    (method (@ (guix download) url-fetch))
    (sha256 h)))
}
\_def\.remotefile#1#2#3{\.guix{#1}{\.rawremotefile{#2}{#3}}}

\_nspublic \remotefile ;

\_def\.insapdownscale{0.8}
\_def\.insappic#1{%
  \_vfil%
  \_hbox to \_hsize{%
    \_hfil%
    \_directlua{insertAPImage("#1", \.insapdownscale)}%
    \_hfil%
  }%
  \_vfil
}

\_nspublic \insapdownscale \insappic ;

\_def\.maybeinspic#1{%
  \_isfile{\.guixref{#1}}%
  \_iftrue\.insappic{\.guixref{#1}}%
  \_else#1:??%
  \_fi%
}

\_doc
The r in \~`\rinspic` stands for remote,
it inserts an image from a remote location,
takes the same arguments as \~`\remotefile`.
The svg variant passes the remote resource through inkscape,
to render it.
\_cod

\_def\.rinspic#1#2#3{%
  \.remotefile{#1}{#2}{#3}%
  \.maybeinspic{#1}%
}

\_def\.rinssvg#1#2#3{%
  \.guix{#1}{((@ (gtex) svg-image) \.rawremotefile{#2}{#3})}%
  \.maybeinspic{#1}%
}

\_nspublic \rinspic \rinssvg ;

\_def\.eval#1#2{((@ (gtex) eval-script) "#1" #2)}
\_def\.feval#1#2#3{((@ (gtex) eval-script) "#2" #3 "#1")}

\_nspublic \eval \feval ;

\_newcount\.gensym_counter
\_def\.symcr#1{#1\_the\.gensym_counter}
\_long\_def\.gensym#1#2{
        \_incr\.gensym_counter%
        \_def\.sym{\.symcr{#1}}%
        #2%
}

\_edef\.quote{"}
\_def\.maybe_slash{}

\_doc
Since Guile uses quotation marks to delimit some parts
of the build expressions, they might at times need to be escaped.
\GTeX's hacky solution to this for now,
are the following macros.
\~`\aqinit` sets the quotation mark as an active
character that expands to either a lone quote,
or an escaped quote if \~`\autoquote` appears in scope.
Since \OpTeX-slides delimits each slide,
there's a shortcut \~`\aq` which you can place
at the top of a slide and all the quotes in that slide
will be escaped.
\_cod

\_long\_def\.autoquote{%
  \_def\.maybe_slash{\_bslash}%
}

\_def\.aqinit{\_adef"{\.maybe_slash\.quote}}
\_def\.aq{\.aqinit\.autoquote}

\_nspublic \autoquote \aq \aqinit ;

\_doc
The \~`\graphviz` environment,
takes in source in the DOT language,
and inserts an image of the rendered graph.
|_cod

\_def\.graphviz#1{%
  \.gensym{graphviz}{%
    \.guix{\.sym}%
    {\.feval{dot.png}{graphviz/bin/dot -Tpng}{%
      \.textfile{dot.dot}{#1}}}

    \.maybeinspic{\.sym}
}}

\_nspublic \graphviz ;

\_def\.textfile#1#2{((@ (guix gexp) mixed-text-file) "#1" "#2")}

\_nspublic \textfile ;

\_doc
\~`\showline` takes a line of code and prints it and its result.
The interpreter and style of printing is overriden by
\~`\evaluator` and \~`\printer` respectively.
\_cod

\_newpublic\_def\printer#1{(display #1)}
\_newpublic\_def\evaluator{guile}

\_def\.showline#1{%
  \.gensym{showline}{
  \.guix{\.sym}{\.eval{\evaluator}{\.textfile{\.sym}{\printer{#1}}}}%

  {\_ttfont
    #1 => \_directlua{includett([[\.guixref{\.sym}]])}}
}}

\_nspublic \showline ;

\_endnamespace
\_endcode

\_doc
\load[doc,gtex]

\tit \GTeX: To interface with the Guix daemon from \OpTeX
\centerline{\it Michal Atlas}

\maketoc

\printdoctail gtex.opm
\printdoc gtex.opm

\begmulti 3
  \tt \makeindex      % prints index in three columns
\endmulti

\bye
\_cod

\_endinput

;; Local Variables:
;; mode: TeX
;; End:
